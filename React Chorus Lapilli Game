import { useState } from 'react';

function Square({value, onSquareClick}) {
  return (
    <button className="square" onClick={onSquareClick}>
      {value}
    </button>
  );
}

export default function Board() {
  const [xIsNext, setXIsNext] = useState(true);
  const [squares, setSquares] = useState(Array(9).fill(null));
  const [moves, setMoves] = useState(0);
  const [prevSpot, setPrevSpot] = useState(-1);
  const [spotChosen, setSpotChosen] = useState(false);

  function handleClick(i) {
    if (calculateWinner(squares)) {
     return;
    }
    const nextSquares = squares.slice();
    
    if(moves >= 6 && squares[4]){
      if (squares[0] && !squares[8] && squares[5]){
        if (((xIsNext && squares[4] === 'X' && squares[0] === 'X') || (!xIsNext && squares[4] === 'O' && squares[0] === 'O')) && (i!= 5 && i !=4)){
          return;
        }
      }
      else if(squares[0] && !squares[8] && squares[7]){
        if (((xIsNext && squares[4] === 'X' && squares[0] === 'X') || (!xIsNext && squares[4] === 'O' && squares[0] === 'O')) && (i!= 7 && i !=4)){
          return;
        }
      }
      else if(squares[1] && !squares[7] && squares[8]){
        if (((xIsNext && squares[4] === 'X' && squares[1] === 'X') || (!xIsNext && squares[4] === 'O' && squares[1] === 'O')) && (i!= 8 && i !=4)){
          return;
        }
      }
      else if(squares[1] && !squares[7] && squares[6]){
        if (((xIsNext && squares[4] === 'X' && squares[1] === 'X') || (!xIsNext && squares[4] === 'O' && squares[1] === 'O')) && (i!= 6 && i !=4)){
          return;
        }
      }
      else if(squares[2] && !squares[6] && squares[7]){
        if (((xIsNext && squares[4] === 'X' && squares[2] === 'X') || (!xIsNext && squares[4] === 'O' && squares[2] === 'O')) && (i!= 7 && i !=4)){
          return;
        }
      }
      else if(squares[2] && !squares[6] && squares[3]){
        if (((xIsNext && squares[4] === 'X' && squares[2] === 'X') || (!xIsNext && squares[4] === 'O' && squares[2] === 'O')) && (i!= 3 && i !=4)){
          return;
        }
      }
      else if(squares[3] && !squares[5] && squares[2]){
        if (((xIsNext && squares[4] === 'X' && squares[3] === 'X') || (!xIsNext && squares[4] === 'O' && squares[3] === 'O')) && (i!= 2 && i !=4)){
          return;
        }
      }
      else if(squares[3] && !squares[5] && squares[8]){
        if (((xIsNext && squares[4] === 'X' && squares[3] === 'X') || (!xIsNext && squares[4] === 'O' && squares[3] === 'O')) && (i!= 8 && i !=4)){
          return;
        }
      }
      else if(squares[5] && !squares[3] && squares[0]){
        if (((xIsNext && squares[4] === 'X' && squares[5] === 'X') || (!xIsNext && squares[4] === 'O' && squares[5] === 'O')) && (i!= 1 && i !=4)){
          return;
        }
      }
      else if(squares[5] && !squares[3] && squares[6]){
        if (((xIsNext && squares[4] === 'X' && squares[5] === 'X') || (!xIsNext && squares[4] === 'O' && squares[5] === 'O')) && (i!= 6 && i !=4)){
          return;
        }
      }
      else if(squares[6] && !squares[2] && squares[1]){
        if (((xIsNext && squares[4] === 'X' && squares[6] === 'X') || (!xIsNext && squares[4] === 'O' && squares[6] === 'O')) && (i!= 1 && i !=4)){
          return;
        }
      }
      else if(squares[6] && !squares[2] && squares[5]){
        if (((xIsNext && squares[4] === 'X' && squares[6] === 'X') || (!xIsNext && squares[4] === 'O' && squares[6] === 'O')) && (i!= 5 && i !=4)){
          return;
        }
      }
      else if(squares[7] && !squares[1] && squares[0]){
        if (((xIsNext && squares[4] === 'X' && squares[7] === 'X') || (!xIsNext && squares[4] === 'O' && squares[7] === 'O')) && (i!= 0 && i !=4)){
          return;
        }
      }
      else if(squares[7] && !squares[1] && squares[2]){
        if (((xIsNext && squares[4] === 'X' && squares[7] === 'X') || (!xIsNext && squares[4] === 'O' && squares[7] === 'O')) && (i!= 2 && i !=4)){
          return;
        }
      }
      else if(squares[8] && !squares[0] && squares[1]){
        if (((xIsNext && squares[4] === 'X' && squares[8] === 'X') || (!xIsNext && squares[4] === 'O' && squares[8] === 'O')) && (i!= 1 && i !=4)){
          return;
        }
      }
      else if(squares[8] && !squares[0] && squares[3]){
        if (((xIsNext && squares[4] === 'X' && squares[8] === 'X') || (!xIsNext && squares[4] === 'O' && squares[8] === 'O')) && (i!= 3 && i !=4)){
          return;
        }
      }
      else if (i != 4){
        if ((xIsNext && squares[4] === 'X') || (!xIsNext && squares[4] === 'O')){
          return;
        }
      }
    }
    
    if (moves >= 6 && squares[i] && !spotChosen){
        if (xIsNext && (squares[i] === 'X')){
          nextSquares[i] = null;
          setPrevSpot(i);
          setSpotChosen(true);
        }
        else if (!xIsNext && squares[i] === 'O'){
          nextSquares[i] = null;
          setPrevSpot(i);
          setSpotChosen(true);
        }
    }
    if (moves >= 6 && !squares[i] && valid(i,prevSpot) && spotChosen){
      if (xIsNext) {
        nextSquares[i] = 'X';
       } else {
        nextSquares[i] = 'O';
       }
       setSpotChosen(false);
       setXIsNext(!xIsNext);
    }

    if (xIsNext && !squares[i] && (moves < 6)) {
     nextSquares[i] = 'X';
     setMoves(moves + 1);
    } else if (!xIsNext && !squares[i] && (moves < 6)){
     nextSquares[i] = 'O';
     setMoves(moves + 1);
    }
    setSquares(nextSquares);
    if (!spotChosen && moves < 6 && !squares[i]){
      setXIsNext(!xIsNext);
    }
    //setMoves(moves + 1);
  }

  const winner = calculateWinner(squares);
  let status;
  if (winner) {
    status = 'Winner: ' + winner;
  } else {
    status = 'Next player: ' + (xIsNext ? 'X' : 'O');
  }

  return (
    <>
      <div className="status">{status}</div>
      <div className="board-row">
        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />
        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />
        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />
      </div>
      <div className="board-row">
        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />
        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />
        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />
      </div>
      <div className="board-row">
        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />
        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />
        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />
      </div>
    </>
  );
}

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}

function valid(i, j) {
  if (i === 0)
    return j === 1 || j === 3 || j === 4;
  else if (i === 1)
    return j === 0 || j === 2 || j === 4 || j === 3 || j === 5;
  else if (i === 2)
    return j === 1 || j === 4 || j === 5;
  else if (i === 3)
    return j === 0 || j === 1 || j === 4 || j === 6 || j === 7;
  else if (i === 4) 
    return true;
  else if (i === 5)
    return j === 1 || j === 2 || j === 4 || j === 7 || j === 8;
  else if (i === 6)
    return j === 3 || j === 4 || j === 7;
  else if (i === 7)
    return j === 3 || j === 4 || j === 5 || j === 6 || j === 8;
  else if (i === 8)
    return j === 4 || j === 5 || j === 7;
}
